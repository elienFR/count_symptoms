@startuml

abstract class Main{
main() : void
}

Main --> AnalyticsCounter

interface ISymptomReader {
    extractSymptoms() : List<String>
}

interface ISymptomCounter {
    countSymptoms() : Map<String,Integer>d
}

interface ISymptomWriter {
    writeSymptomsFile() : void
}

class AnalyticsCounter{
   symptomsList : ISymptomReader
   symptomsCount : ISymptomCounter
   symptomsOutputFile : ISymptomWriter
   sourceFilePath : String
   outFilePath : String
   execute() : void
}

class ExtractLinesFromFile  {
    filepath : String
    extractedList : List<String>
    extract() : List<String>
    sortData() : void
    extractSymptoms() : List<String>
}

ISymptomReader <.. ExtractLinesFromFile

class CountDataFromFile{
    filepath : String
    mapOfCount : Map<String,Integer>
    count() : Map<String,Integer>
    countSymptoms() : Map<String,Integer>
    show() : void
}

ISymptomCounter <.. CountDataFromFile

class WriteMapStringIntegerToFile {
    outputFilepath : String
    writeToFile() : void
    writeSymptomsFile() : void
}

ISymptomWriter <.. WriteMapStringIntegerToFile

AnalyticsCounter --> ISymptomReader
AnalyticsCounter --> ISymptomCounter
AnalyticsCounter --> ISymptomWriter



@enduml